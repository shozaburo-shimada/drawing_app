{"ast":null,"code":"var _jsxFileName = \"/Users/shozaburo/Documents/git/drawing_app/src/PaperCanvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport paper from 'paper';\n\n// マウスポインターの座標\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Vertex {\n  constructor() {\n    this.x = void 0;\n    this.y = void 0;\n  }\n}\nconst Canvas = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    // canvasが準備できたらpaper.jsを初期化\n    if (canvasRef.current) {\n      paper.setup(canvasRef.current);\n      // ここに描画処理を書く\n      const circle = new paper.Path.Circle({\n        center: [50, 50],\n        radius: 30,\n        strokeColor: 'black'\n      });\n      // 任意で、交差判定などの処理もここで行えます。\n      console.log(circle);\n    }\n    // クリーンアップ処理 (コンポーネントがアンマウントされた時)\n    return () => {\n      paper.project.clear(); // 既存のpaper.jsプロジェクトをクリア\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 600,\n    height: 500\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 10\n  }, this);\n};\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useEffect","useRef","paper","jsxDEV","_jsxDEV","Vertex","constructor","x","y","Canvas","_s","canvasRef","current","setup","circle","Path","Circle","center","radius","strokeColor","console","log","project","clear","ref","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shozaburo/Documents/git/drawing_app/src/PaperCanvas.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport paper from 'paper';\n\n// マウスポインターの座標\nexport class Vertex {\n  x: number;\n  y: number;\n}\n\nconst Canvas = () => {\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    // canvasが準備できたらpaper.jsを初期化\n    if (canvasRef.current) {\n      paper.setup(canvasRef.current);\n      // ここに描画処理を書く\n      const circle = new paper.Path.Circle({\n        center: [50, 50],\n        radius: 30,\n        strokeColor: 'black',\n      });\n      // 任意で、交差判定などの処理もここで行えます。\n      console.log(circle);\n    }\n    // クリーンアップ処理 (コンポーネントがアンマウントされた時)\n    return () => {\n      paper.project.clear();  // 既存のpaper.jsプロジェクトをクリア\n    };\n  }, []);\n  return <canvas ref={canvasRef} width={600} height={500} />;\n};\n\nexport default Canvas;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,MAAM,CAAC;EAAAC,YAAA;IAAA,KAClBC,CAAC;IAAA,KACDC,CAAC;EAAA;AACH;AAEA,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAMC,SAAS,GAAGV,MAAM,CAAC,IAAI,CAAC;EAC9BD,SAAS,CAAC,MAAM;IACd;IACA,IAAIW,SAAS,CAACC,OAAO,EAAE;MACrBV,KAAK,CAACW,KAAK,CAACF,SAAS,CAACC,OAAO,CAAC;MAC9B;MACA,MAAME,MAAM,GAAG,IAAIZ,KAAK,CAACa,IAAI,CAACC,MAAM,CAAC;QACnCC,MAAM,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;QAChBC,MAAM,EAAE,EAAE;QACVC,WAAW,EAAE;MACf,CAAC,CAAC;MACF;MACAC,OAAO,CAACC,GAAG,CAACP,MAAM,CAAC;IACrB;IACA;IACA,OAAO,MAAM;MACXZ,KAAK,CAACoB,OAAO,CAACC,KAAK,CAAC,CAAC,CAAC,CAAE;IAC1B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN,oBAAOnB,OAAA;IAAQoB,GAAG,EAAEb,SAAU;IAACc,KAAK,EAAE,GAAI;IAACC,MAAM,EAAE;EAAI;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC5D,CAAC;AAACpB,EAAA,CArBID,MAAM;AAAAsB,EAAA,GAANtB,MAAM;AAuBZ,eAAeA,MAAM;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}